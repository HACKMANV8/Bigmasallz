[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synthaix-backend"
version = "1.0.0"
description = "SynthAIx Backend - Scalable Synthetic Data Generator"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "SynthAIx Team"}
]
dependencies = [
    # Core Framework
    "fastapi==0.109.0",
    "uvicorn[standard]==0.27.0",
    "pydantic==2.5.3",
    "pydantic-settings==2.1.0",
    
    # LLM APIs
    "openai==1.10.0",
    "google-generativeai==0.3.2",
    "httpx==0.26.0",
    
    # Vector Store & Embeddings
    "chromadb==0.4.22",
    "sentence-transformers==2.3.1",
    "numpy<2.0.0",
    
    # Database (optional)
    "sqlalchemy==2.0.25",
    "alembic==1.13.1",
    "psycopg2-binary==2.9.9",
    "redis==5.0.1",
    
    # Async & Concurrency
    "asyncio==3.4.3",
    "aiofiles==23.2.1",
    
    # Utilities
    "python-multipart==0.0.6",
    "python-jose[cryptography]==3.3.0",
    "passlib[bcrypt]==1.7.4",
    "python-dotenv==1.0.0",
    
    # Logging & Monitoring
    "structlog==24.1.0",
    "sentry-sdk[fastapi]==1.40.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.4",
    "pytest-asyncio==0.23.3",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    
    # Code Quality
    "black==24.1.1",
    "ruff==0.1.14",
    "mypy==1.8.0",
    "pre-commit==3.6.0",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
