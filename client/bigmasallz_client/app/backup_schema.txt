"use client";

import { FormEvent, useCallback, useEffect, useMemo, useRef, useState } from "react";
import { 
  Activity, 
  Bot, 
  Cpu, 
  Database, 
  Download, 
  Gauge, 
  Plus, 
  RefreshCcw, 
  Radar, 
  Rocket, 
  ShieldCheck, 
  Sparkles, 
  Waves, 
  Terminal, 
  Trash2, 
  User, 
  WandSparkles 
} from "lucide-react";

// Import our modular components
import ChatConsole from "./components/ChatConsole";
import SynthesisTimeline from "./components/SynthesisTimeline";
import SchemaArchitect from "./components/SchemaArchitect";
import SignalTelemetry from "./components/SignalTelemetry";
import DatasetPreview from "./components/DatasetPreview";

// Import types and constants
import type { 
  ChatMessage, 
  FieldDefinition, 
  DatasetStats, 
  LlmMetric, 
  TelemetrySignal 
} from "./components/types";
import { 
  PROGRESS_STEPS, 
  LLM_METRIC_TEMPLATES, 
  TYPE_OPTIONS, 
  DEFAULT_FIELDS 
} from "./components/constants";
  id: number;
  label: string;
  value: string;
  trend: "up" | "down";
  accent: "cyan" | "violet" | "emerald" | "amber" | "pink";
};

const PROGRESS_STEPS = [
  {
    title: "Interpreting request",
    description: "SynthxAI analyzes dataset intent and domain context.",
  },
  {
    title: "Drafting schema",
    description: "Generating relational blueprint with field level semantics.",
  },
  {
    title: "Synthesizing rows",
    description: "Calibrating statistical models and rendering synthetic records.",
  },
  {
    title: "Quality assurance",
    description: "Running privacy checks and structural validations before delivery.",
  },
];

const LLM_METRIC_TEMPLATES: LlmMetric[] = [
  {
    id: 1,
    label: "Tokens / sec",
    value: "42.4k",
    trend: "up",
    accent: "cyan",
  },
  {
    id: 2,
    label: "Latency",
    value: "128 ms",
    trend: "down",
    accent: "violet",
  },
  {
    id: 3,
    label: "Context load",
    value: "78 %",
    trend: "up",
    accent: "emerald",
  },
  {
    id: 4,
    label: "Coherence",
    value: "96 %",
    trend: "up",
    accent: "amber",
  },
];

const TYPE_OPTIONS = [
  "string",
  "integer",
  "float",
  "boolean",
  "datetime",
  "uuid",
  "email",
  "currency",
];

const DEFAULT_FIELDS: FieldDefinition[] = [
  {
    id: 1,
    name: "customer_id",
    type: "uuid",
    description: "Unique entity identifier",
    synthetic: true,
    example: "bce5-9f11-90aa",
  },
  {
    id: 2,
    name: "region",
    type: "string",
    description: "Market region label",
    synthetic: true,
    example: "EMEA",
  },
  {
    id: 3,
    name: "plan_tier",
    type: "string",
    description: "Subscription level",
    synthetic: true,
    example: "Enterprise",
  },
  {
    id: 4,
    name: "sessions_last_30d",
    type: "integer",
    description: "Usage intensity in rolling month",
    synthetic: true,
    example: "28",
  },
  {
    id: 5,
    name: "revenue_90d",
    type: "currency",
    description: "Latest 90 day revenue snapshot",
    synthetic: true,
    example: "$9,420.13",
  },
];

const INITIAL_MESSAGES: ChatMessage[] = [
  {
    id: 1,
    role: "agent",
    content:
      "Welcome to SynthxAI. Tell me the domain you want to model and I will draft a privacy-safe synthetic dataset for you.",
    timestamp: "22:17",
  },
  {
    id: 2,
    role: "user",
    content: "I need a B2B customer health dataset for quarterly forecast modeling.",
    timestamp: "22:18",
  },
  {
    id: 3,
    role: "agent",
    content:
      "Copy that. I will assemble a schema that captures renewal risk signals, usage metrics, and financial posture.",
    timestamp: "22:18",
  },
];

function formatBytes(size: number) {
  if (size <= 0) return "~0 MB";
  const mb = size / (1024 * 1024);
  return `${mb.toFixed(mb < 1 ? 2 : 1)} MB`;
}

function generateValue(field: FieldDefinition, rowIndex: number) {
  const base = field.name.trim() || `column_${field.id}`;
  switch (field.type) {
    case "uuid":
      return `${base.slice(0, 4)}-${Math.random().toString(16).slice(2, 6)}-${
        Math.random().toString(16).slice(2, 6)
      }`;
    case "integer":
      return Math.floor(Math.abs(Math.sin(rowIndex + 1) * 9973) % 1200);
    case "float":
      return (Math.abs(Math.cos(rowIndex + 3.14) * 5000) % 100).toFixed(2);
    case "boolean":
      return (rowIndex + Math.random()) % 2 > 1 ? "true" : "false";
    case "datetime":
      return new Date(Date.now() - rowIndex * 86400000)
        .toISOString()
        .replace(".000", "");
    case "email":
      return `${base.replace(/[^a-zA-Z]/g, "") || "user"}${rowIndex + 1}@synthx.ai`;
    case "currency":
      return `$${(Math.abs(Math.sin(rowIndex) * 10000) + 120).toFixed(2)}`;
    default:
      return `${base}-${rowIndex + 1}`;
  }
}

function generateDatasetPreview(fields: FieldDefinition[], rows: number) {
  const safeFields = fields.length ? fields : DEFAULT_FIELDS;
  const previewRows = Math.min(Math.max(rows, 1), 12);
  return Array.from({ length: previewRows }, (_, rowIndex) => {
    return safeFields.reduce<Record<string, string | number>>((acc, field, fieldIndex) => {
      const columnLabel = field.name.trim() || `column_${fieldIndex + 1}`;
      acc[columnLabel] = generateValue(field, rowIndex);
      return acc;
    }, {});
  });
}

function computeStats(fields: FieldDefinition[], rows: number): DatasetStats {
  const fieldCount = Math.max(fields.length, 1);
  const estimatedBytes = rows * fieldCount * 18;
  const syntheticScore = Math.min(0.91 + fieldCount * 0.006, 0.99);
  const generationSeconds = Math.max(2.4, (rows * fieldCount) / 3200);
  return {
    rows,
    columns: fieldCount,
    estimatedSize: formatBytes(estimatedBytes),
    syntheticScore,
    generationTime: `${generationSeconds.toFixed(1)}s`,
  };
}

function toCsv(data: Array<Record<string, string | number>>) {
  if (!data.length) return "";
  const columns = Object.keys(data[0]);
  const header = columns.join(",");
  const rows = data
    .map((entry) =>
      columns
        .map((column) => {
          const value = entry[column];
          const cell = value ?? "";
          const stringValue = String(cell);
          return stringValue.includes(",") ? `"${stringValue}"` : stringValue;
        })
        .join(",")
    )
    .join("\n");
  return `${header}\n${rows}`;
}

function mutateMetric(metric: LlmMetric): LlmMetric {
  const numeric = parseFloat(metric.value.replace(/[^0-9.]+/g, "")) || 0;

  if (metric.label === "Tokens / sec") {
    const next = Math.max(28, numeric + (Math.random() - 0.3) * 9);
    return {
      ...metric,
      value: `${next.toFixed(1)}k`,
      trend: next >= numeric ? "up" : "down",
    };
  }

  if (metric.label === "Latency") {
    const next = Math.max(72, numeric + (Math.random() - 0.5) * 18);
    return {
      ...metric,
      value: `${Math.round(next)} ms`,
      trend: next <= numeric ? "down" : "up",
    };
  }

  if (metric.label === "Context load") {
    const next = Math.min(96, Math.max(55, numeric + (Math.random() - 0.45) * 6));
    return {
      ...metric,
      value: `${Math.round(next)} %`,
      trend: next >= numeric ? "up" : "down",
    };
  }

  if (metric.label === "Coherence") {
    const next = Math.min(99, Math.max(82, numeric + (Math.random() - 0.4) * 4));
    return {
      ...metric,
      value: `${Math.round(next)} %`,
      trend: next >= numeric ? "up" : "down",
    };
  }

  return metric;
}

function primeLlmMetrics(): LlmMetric[] {
  return LLM_METRIC_TEMPLATES.map((metric) => mutateMetric({ ...metric }));
}

export default function Home() {
  const [datasetName, setDatasetName] = useState("synthx_customer_health_v2");
  const [datasetNarrative, setDatasetNarrative] = useState(
    "Synthetic customer health signals with revenue, engagement, and retention risk markers."
  );
  const [rowCount, setRowCount] = useState(5000);
  const [fields, setFields] = useState<FieldDefinition[]>(DEFAULT_FIELDS);
  const [messages, setMessages] = useState<ChatMessage[]>(INITIAL_MESSAGES);
  const [chatDraft, setChatDraft] = useState("");
  const [activeStepIndex, setActiveStepIndex] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [previewData, setPreviewData] = useState(() => generateDatasetPreview(DEFAULT_FIELDS, 12));
  const [stats, setStats] = useState(() => computeStats(DEFAULT_FIELDS, rowCount));
  const [llmMetrics, setLlmMetrics] = useState<LlmMetric[]>(LLM_METRIC_TEMPLATES);

  const messageIdRef = useRef(INITIAL_MESSAGES.length + 1);
  const timerCleanupRef = useRef<(() => void) | null>(null);
  const metricIntervalRef = useRef<number | null>(null);

  const addMessage = useCallback((payload: Omit<ChatMessage, "id" | "timestamp">) => {
    const timestamp = new Date().toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
    });
    setMessages((prev) => [
      ...prev,
      {
        id: messageIdRef.current++,
        timestamp,
        ...payload,
      },
    ]);
  }, []);

  useEffect(() => {
    return () => {
      timerCleanupRef.current?.();
      if (typeof window !== "undefined" && metricIntervalRef.current !== null) {
        window.clearInterval(metricIntervalRef.current);
      }
    };
  }, []);

  useEffect(() => {
    if (!isGenerating) {
      setPreviewData(generateDatasetPreview(fields, rowCount));
    }
  }, [fields, rowCount, isGenerating]);

  useEffect(() => {
    setStats(computeStats(fields, rowCount));
  }, [fields, rowCount]);

  const handleSendMessage = useCallback(
    (event: FormEvent<HTMLFormElement>) => {
      event.preventDefault();
      const trimmed = chatDraft.trim();
      if (!trimmed) return;
      addMessage({ role: "user", content: trimmed });
      setChatDraft("");

      setTimeout(() => {
        addMessage({
          role: "agent",
          content:
            "Noted. I am refining the schema parameters and will reflect them in the blueprint panel.",
        });
      }, 650);
    },
    [chatDraft, addMessage]
  );

  const handleAddField = () => {
    setFields((prev) => [
      ...prev,
      {
        id: prev.length ? Math.max(...prev.map((item) => item.id)) + 1 : 1,
        name: "",
        type: TYPE_OPTIONS[0],
        description: "",
        synthetic: true,
        example: "",
      },
    ]);
  };

  const handleFieldChange = <K extends keyof FieldDefinition>(
    fieldId: number,
    key: K,
    value: FieldDefinition[K]
  ) => {
    setFields((prev) =>
      prev.map((field) => (field.id === fieldId ? { ...field, [key]: value } : field))
    );
  };

  const handleRemoveField = (fieldId: number) => {
    setFields((prev) => prev.filter((field) => field.id !== fieldId));
  };

  const handleGenerateDataset = useCallback(() => {
    if (isGenerating) return;

    const snapshotFields = fields.map((field) => ({ ...field }));
    const snapshotRows = rowCount;
    const snapshotStats = computeStats(snapshotFields, snapshotRows);

    addMessage({
      role: "agent",
      content: `Initiating synthesis for ${snapshotRows.toLocaleString()} rows based on the current schema.`,
    });

    timerCleanupRef.current?.();
    if (typeof window !== "undefined" && metricIntervalRef.current !== null) {
      window.clearInterval(metricIntervalRef.current);
      metricIntervalRef.current = null;
    }

    setLlmMetrics(primeLlmMetrics());
    setIsGenerating(true);
    setActiveStepIndex(0);

    const timers: number[] = [];
    PROGRESS_STEPS.forEach((_, index) => {
      const timer = window.setTimeout(() => {
        setActiveStepIndex(index);
        if (index === PROGRESS_STEPS.length - 1) {
          const nextPreview = generateDatasetPreview(snapshotFields, snapshotRows);
          setPreviewData(nextPreview);
          setStats(snapshotStats);
          setIsGenerating(false);
          if (metricIntervalRef.current !== null) {
            window.clearInterval(metricIntervalRef.current);
            metricIntervalRef.current = null;
            setLlmMetrics((prev) => prev.map((metric) => mutateMetric(metric)));
          }
          addMessage({
            role: "agent",
            content: `Dataset ready. Synthetic fidelity at ${Math.round(
              snapshotStats.syntheticScore * 100
            )}%. Preview loaded below.`,
          });
          timerCleanupRef.current = null;
        }
      }, index * 1100 + 400);
      timers.push(timer);
    });

    if (typeof window !== "undefined") {
      metricIntervalRef.current = window.setInterval(() => {
        setLlmMetrics((prev) => prev.map((metric) => mutateMetric(metric)));
      }, 900);
    }

    timerCleanupRef.current = () => {
      timers.forEach((timer) => window.clearTimeout(timer));
      if (metricIntervalRef.current !== null) {
        window.clearInterval(metricIntervalRef.current);
        metricIntervalRef.current = null;
      }
    };
  }, [addMessage, fields, isGenerating, rowCount]);

  const handleDownloadPreview = () => {
    const csv = toCsv(previewData);
    if (!csv) return;
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const anchor = document.createElement("a");
    anchor.href = url;
    anchor.download = `${datasetName || "synthx-dataset"}.csv`;
    document.body.appendChild(anchor);
    anchor.click();
    document.body.removeChild(anchor);
    URL.revokeObjectURL(url);
  };

  const schemaBlueprint = useMemo(
    () =>
      fields.map((field) => ({
        label: field.name.trim() || "Untitled column",
        type: field.type,
        description: field.description.trim() || "--",
      })),
    [fields]
  );

  const blueprintDensity = useMemo(() => {
    const coverage = fields.filter((field) => field.description.trim()).length;
    return Math.round((coverage / Math.max(fields.length, 1)) * 100);
  }, [fields]);

  const telemetrySignals = useMemo(
    () =>
      buildTelemetrySignals({
        stats,
        blueprintDensity,
        llmMetrics,
      }),
    [stats, blueprintDensity, llmMetrics]
  );

  return (
    <div className="relative min-h-screen overflow-hidden bg-slate-950 text-slate-100">
      <div className="pointer-events-none absolute -top-32 right-10 h-72 w-72 rounded-full bg-cyan-500/40 blur-3xl" />
  <div className="pointer-events-none absolute bottom-0 left-1/2 h-96 w-160 -translate-x-1/2 rounded-full bg-purple-500/30 blur-3xl" />
      <div className="absolute inset-0 bg-grid-synth opacity-[0.35]" />

      <div className="relative z-10 mx-auto flex max-w-[1200px] flex-col gap-8 px-6 py-10 lg:px-12 xl:px-16">
        <header className="glass-panel flex flex-col gap-6 rounded-3xl border border-cyan-500/20 bg-slate-900/70 px-8 pb-8 pt-6 shadow-neon">
          <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
            <div>
              <div className="inline-flex items-center gap-3 rounded-full border border-cyan-500/40 bg-cyan-500/10 px-4 py-1 text-sm font-medium text-cyan-200">
                <Sparkles className="h-4 w-4" />
                SynthxAI Intelligence Stack
              </div>
              <h1 className="mt-4 text-4xl font-semibold tracking-tight text-slate-50 md:text-5xl">
                SynthxAI Command Console
              </h1>
              <p className="mt-3 max-w-2xl text-base text-slate-300">
                Design, simulate, and export synthetic datasets with enterprise-grade governance. Your
                autonomous copilot drafts schema, calibrates distributions, and streams instant previews.
              </p>
            </div>
            <div className="flex items-center gap-4 self-start rounded-2xl border border-emerald-400/30 bg-emerald-400/10 px-5 py-4 text-emerald-200 shadow-neon">
              <ShieldCheck className="h-10 w-10" />
              <div>
                <p className="text-xs uppercase tracking-[0.22em] text-emerald-300/80">Safeguards</p>
                <p className="text-sm font-medium">Differential privacy shields engaged</p>
              </div>
            </div>
          </div>
          <div className="grid gap-4 text-sm text-slate-300 md:grid-cols-3">
            <div className="rounded-2xl border border-cyan-500/20 bg-cyan-500/5 p-4">
              <p className="text-xs uppercase tracking-widest text-cyan-300">Dataset Codename</p>
              <p className="mt-2 text-lg font-semibold text-slate-50">{datasetName}</p>
            </div>
            <div className="rounded-2xl border border-indigo-400/20 bg-indigo-500/10 p-4">
              <p className="text-xs uppercase tracking-widest text-indigo-200">Narrative</p>
              <p className="mt-2 text-sm leading-relaxed text-indigo-100/90">
                {datasetNarrative}
              </p>
            </div>
            <div className="rounded-2xl border border-emerald-400/20 bg-emerald-500/10 p-4">
              <p className="text-xs uppercase tracking-widest text-emerald-200">Blueprint Coverage</p>
              <p className="mt-2 text-3xl font-semibold text-emerald-100">{blueprintDensity}%</p>
            </div>
          </div>
        </header>

  <main className="grid gap-7 xl:grid-cols-[minmax(0,1.35fr)_minmax(0,1.35fr)]">
          <section className="grid gap-7">
            <div className="glass-panel group relative overflow-hidden rounded-3xl border border-cyan-500/30 bg-slate-900/70 p-6 shadow-neon transition duration-500 hover:border-cyan-300/60 hover:shadow-[0_0_55px_rgba(34,211,238,0.2)]">
              <div className="pointer-events-none absolute inset-0 opacity-0 transition group-hover:opacity-100">
                <div className="absolute inset-x-6 -top-16 h-36 rounded-full bg-linear-to-b from-cyan-500/15 via-transparent to-transparent blur-3xl animate-drift-slow" />
                <div className="absolute -right-14 top-1/2 h-60 w-28 -translate-y-1/2 rotate-12 bg-linear-to-t from-transparent via-sky-500/20 to-transparent blur-3xl animate-drift-slow" />
              </div>
              <div className="absolute inset-y-8 left-0 w-px bg-linear-to-b from-transparent via-cyan-500/30 to-transparent opacity-40" />
              <div className="absolute inset-y-8 right-0 w-px bg-linear-to-b from-transparent via-purple-500/30 to-transparent opacity-40" />
              <div className="relative z-10 mb-5 flex items-center justify-between rounded-2xl border border-cyan-500/40 bg-slate-950/75 px-4 py-3 text-xs uppercase tracking-[0.32em] text-cyan-200 shadow-[0_0_32px_rgba(14,165,233,0.3)]">
                <div className="flex items-center gap-3">
                  <span className="grid h-8 w-8 place-items-center rounded-xl border border-cyan-400/50 bg-cyan-500/15 text-cyan-200 shadow-[0_0_18px_rgba(6,182,212,0.45)]">
                    <Bot className="h-4 w-4" />
                  </span>
                  <div className="leading-tight">
                    <p className="text-[11px] tracking-[0.38em] text-cyan-100">SynthxAI</p>
                    <p className="mt-1 text-[10px] tracking-[0.28em] text-slate-400">SYNTH CORE CONSOLE</p>
                  </div>
                </div>
                <span className="rounded-full border border-cyan-400/40 bg-cyan-500/10 px-3 py-1 text-[9px] font-semibold tracking-[0.4em] text-cyan-100">
                  LIVE LINK
                </span>
              </div>
              <div className="flex h-112 flex-col">
                <div className="flex-1 space-y-4 overflow-y-auto pr-2">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={clsx(
                        "flex w-full",
                        message.role === "user" ? "justify-end" : "justify-start"
                      )}
                    >
                      <div
                        className={clsx(
                          "flex max-w-[80%] items-start gap-3",
                          message.role === "user"
                            ? "flex-row-reverse text-right"
                            : "flex-row text-left"
                        )}
                      >
                        <div
                          className={clsx(
                            "shrink-0 rounded-full border p-2 shadow-[0_0_25px_rgba(59,130,246,0.25)]",
                            message.role === "user"
                              ? "border-cyan-500/60 bg-linear-to-b from-cyan-500/25 via-cyan-600/10 to-transparent text-cyan-200"
                              : "border-purple-500/60 bg-linear-to-b from-purple-500/25 via-purple-600/10 to-transparent text-purple-200"
                          )}
                        >
                          {message.role === "user" ? (
                            <User className="h-4 w-4" />
                          ) : (
                            <Bot className="h-4 w-4" />
                          )}
                        </div>
                        <div
                          className={clsx(
                            "rounded-2xl border px-5 py-3 text-sm leading-6 shadow-lg transition-all duration-500 hover:-translate-y-0.5 hover:shadow-[0_0_45px_rgba(0,212,255,0.22)] backdrop-blur",
                            message.role === "user"
                              ? "border-cyan-500/40 bg-linear-to-r from-cyan-500/20 via-cyan-500/10 to-transparent text-cyan-100"
                              : "border-purple-500/40 bg-linear-to-r from-purple-500/20 via-purple-500/10 to-transparent text-purple-100"
                          )}
                        >
                          <div className="flex items-center justify-between text-[10px] uppercase tracking-[0.35em] text-slate-300">
                            <span>
                              {message.role === "user" ? "operator" : "synthx core"}
                            </span>
                            <span>{message.timestamp}</span>
                          </div>
                          <p className="mt-3">{message.content}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                <form onSubmit={handleSendMessage} className="mt-4 flex gap-3">
                  <textarea
                    value={chatDraft}
                    onChange={(event) => setChatDraft(event.target.value)}
                    placeholder="Describe the dataset intent, features, and privacy constraints..."
                    className="min-h-13 flex-1 resize-none rounded-2xl border border-cyan-500/30 bg-black/50 px-4 py-3 text-sm text-slate-100 placeholder:text-slate-500 transition focus:border-cyan-300 focus:outline-none focus:ring-2 focus:ring-cyan-300/40"
                  />
                  <button
                    type="submit"
                    className="group flex items-center gap-2 rounded-2xl border border-cyan-500/50 bg-linear-to-r from-cyan-500/40 via-sky-500/40 to-teal-500/30 px-5 py-3 text-sm font-semibold uppercase tracking-[0.28em] text-cyan-50 transition hover:-translate-y-0.5 hover:border-cyan-200/60 hover:shadow-[0_0_45px_rgba(0,242,255,0.28)]"
                  >
                    <WandSparkles className="h-4 w-4 transition group-hover:scale-110" />
                    Engage
                  </button>
                </form>
              </div>
            </div>

            <div className="glass-panel group relative overflow-hidden rounded-3xl border border-slate-700/70 bg-slate-900/80 p-4 shadow-neon transition duration-500 hover:border-cyan-400/40 hover:shadow-[0_0_42px_rgba(21,244,255,0.18)]">
              <div className="pointer-events-none absolute inset-x-8 -top-24 h-48 rounded-full bg-linear-to-b from-cyan-500/12 via-transparent to-transparent blur-3xl opacity-0 transition group-hover:opacity-100 animate-drift-slow" />
              <div className="pointer-events-none absolute inset-y-0 right-12 w-px bg-linear-to-b from-transparent via-cyan-500/40 to-transparent opacity-40" />
              <div className="pointer-events-none absolute inset-y-6 left-8 hidden w-px bg-linear-to-b from-transparent via-cyan-500/25 to-transparent opacity-70 lg:block" />
              <div className="relative flex items-center justify-between">
                <h2 className="text-lg font-semibold text-slate-100">Synthesis Timeline</h2>
                <Terminal className="h-5 w-5 text-cyan-300" />
              </div>
              {isGenerating && (
                <div className="relative mt-5 grid gap-3 rounded-2xl border border-cyan-500/30 bg-black/40 p-4 shadow-[0_0_25px_rgba(20,184,166,0.18)] md:grid-cols-2">
                  <div className="pointer-events-none absolute inset-0 animate-pulse-slow rounded-2xl border border-cyan-500/20" />
                  {llmMetrics.map((metric) => (
                    <MetricSignal key={metric.id} metric={metric} />
                  ))}
                </div>
              )}
              <div className="relative mt-3 space-y-3">
                {PROGRESS_STEPS.map((step, index) => {
                  const status =
                    index < activeStepIndex
                      ? "done"
                      : index === activeStepIndex
                      ? "active"
                      : "pending";
                  return (
                    <div
                      key={step.title}
                      className={clsx(
                        "rounded-2xl border p-3 transition-all duration-500 hover:-translate-y-1 hover:shadow-[0_0_26px_rgba(59,130,246,0.16)]",
                        {
                        "border-emerald-400/30 bg-emerald-400/10 shadow-neon": status === "done",
                        "border-cyan-400/40 bg-cyan-500/20 shadow-neon": status === "active",
                        "border-slate-700/50 bg-slate-900/70": status === "pending",
                        }
                      )}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2.5">
                          <div
                            className={clsx(
                              "flex h-7 w-7 items-center justify-center rounded-full border text-[11px]",
                              status === "done"
                                ? "border-emerald-300/60 bg-emerald-400/20 text-emerald-100"
                                : status === "active"
                                ? "border-cyan-300/60 bg-cyan-500/20 text-cyan-100"
                                : "border-slate-600 bg-slate-800 text-slate-400"
                            )}
                          >
                            {status === "done" ? (
                              <ShieldCheck className="h-4 w-4" />
                            ) : status === "active" ? (
                              <Rocket className="h-4 w-4" />
                            ) : (
                              <RefreshCcw className="h-4 w-4" />
                            )}
                          </div>
                          <div>
                            <p className="text-sm font-semibold text-slate-100">{step.title}</p>
                            <p className="text-xs text-slate-400">{step.description}</p>
                          </div>
                        </div>
                        <div
                          className={clsx("text-xs uppercase tracking-[0.25em]", {
                            "text-emerald-200": status === "done",
                            "text-cyan-200": status === "active",
                            "text-slate-500": status === "pending",
                          })}
                        >
                          {status === "done" ? "sealed" : status === "active" ? "executing" : "queued"}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </section>

          <section className="grid gap-7">
            <div className="glass-panel group relative overflow-hidden rounded-3xl border border-cyan-500/30 bg-slate-900/80 p-6 shadow-neon transition duration-500 hover:border-violet-400/40 hover:shadow-[0_0_55px_rgba(124,58,237,0.22)]">
              <div className="pointer-events-none absolute inset-x-4 -top-24 h-44 rounded-full bg-linear-to-b from-violet-500/12 via-transparent to-transparent blur-3xl opacity-0 transition group-hover:opacity-100 animate-drift-slow" />
              <div className="relative flex items-center justify-between">
                <h2 className="text-lg font-semibold text-slate-100">Schema Architect</h2>
                <Database className="h-5 w-5 text-cyan-300" />
              </div>
              <div className="mt-4 grid gap-4">
                <label className="flex flex-col gap-2 text-sm">
                  <span className="text-xs uppercase tracking-[0.25em] text-slate-400">Dataset Name</span>
                  <input
                    className="rounded-2xl border border-cyan-500/40 bg-black/40 px-4 py-3 text-sm text-slate-100 focus:border-cyan-300 focus:outline-none focus:ring-2 focus:ring-cyan-400/30"
                    value={datasetName}
                    onChange={(event) => setDatasetName(event.target.value)}
                  />
                </label>
                <label className="flex flex-col gap-2 text-sm">
                  <span className="text-xs uppercase tracking-[0.25em] text-slate-400">Narrative</span>
                  <textarea
                    className="min-h-18 rounded-2xl border border-cyan-500/40 bg-black/40 px-4 py-3 text-sm text-slate-100 focus:border-cyan-300 focus:outline-none focus:ring-2 focus:ring-cyan-400/30"
                    value={datasetNarrative}
                    onChange={(event) => setDatasetNarrative(event.target.value)}
                  />
                </label>
                <label className="flex flex-col gap-2 text-sm">
                  <span className="text-xs uppercase tracking-[0.25em] text-slate-400">Rows Required</span>
                  <input
                    type="number"
                    min={100}
                    step={100}
                    className="rounded-2xl border border-cyan-500/40 bg-black/40 px-4 py-3 text-sm text-slate-100 focus:border-cyan-300 focus:outline-none focus:ring-2 focus:ring-cyan-400/30"
                    value={rowCount}
                    onChange={(event) => setRowCount(Number(event.target.value))}
                  />
                </label>
              </div>

              <div className="mt-6 flex items-center justify-between">
                <h3 className="text-sm font-semibold text-slate-200 uppercase tracking-[0.35em]">Blueprint</h3>
                <button
                  onClick={handleAddField}
                  className="inline-flex items-center gap-2 rounded-full border border-cyan-400/40 bg-cyan-400/10 px-3 py-1 text-xs font-semibold uppercase tracking-[0.2em] text-cyan-100 transition hover:bg-cyan-400/30"
                >
                  <Plus className="h-3.5 w-3.5" /> add column
                </button>
              </div>

              <div className="mt-4 space-y-4">
                {fields.map((field, index) => (
                  <div
                    key={field.id}
                    className="rounded-2xl border border-slate-700/60 bg-slate-900/90 p-4 shadow-inner transition-all duration-500 hover:-translate-y-1 hover:border-cyan-400/50 hover:shadow-[0_0_40px_rgba(59,130,246,0.2)]"
                  >
                    <div className="flex items-start gap-4">
                      <span className="mt-1 inline-flex h-7 w-7 items-center justify-center rounded-full border border-cyan-400/40 bg-cyan-500/10 text-xs font-semibold text-cyan-100">
                        {index + 1}
                      </span>
                      <div className="flex-1 space-y-3 text-sm">
                        <div className="grid gap-3 md:grid-cols-[1.3fr_0.9fr]">
                          <input
                            placeholder="column_name"
                            value={field.name}
                            onChange={(event) =>
                              handleFieldChange(field.id, "name", event.target.value)
                            }
                            className="rounded-xl border border-cyan-500/30 bg-black/40 px-4 py-2 text-sm text-slate-100 focus:border-cyan-300 focus:outline-none"
                          />
                          <select
                            value={field.type}
                            onChange={(event) =>
                              handleFieldChange(field.id, "type", event.target.value)
                            }
                            className="rounded-xl border border-cyan-500/30 bg-black/40 px-4 py-2 text-sm text-slate-100 focus:border-cyan-300 focus:outline-none"
                          >
                            {TYPE_OPTIONS.map((option) => (
                              <option key={option} value={option}>
                                {option}
                              </option>
                            ))}
                          </select>
                        </div>
                        <textarea
                          placeholder="Describe the signal, distribution, and constraints"
                          value={field.description}
                          onChange={(event) =>
                            handleFieldChange(field.id, "description", event.target.value)
                          }
                          className="w-full rounded-xl border border-slate-700/60 bg-black/30 px-4 py-2 text-sm text-slate-100 focus:border-cyan-300 focus:outline-none"
                        />
                        <div className="flex flex-wrap items-center gap-4 text-xs text-slate-300">
                          <label className="inline-flex items-center gap-2">
                            <input
                              type="checkbox"
                              checked={field.synthetic}
                              onChange={(event) =>
                                handleFieldChange(field.id, "synthetic", event.target.checked)
                              }
                              className="h-4 w-4 rounded border border-cyan-500/40 bg-black/40"
                            />
                            <span>Model generated feature</span>
                          </label>
                          <input
                            placeholder="example value"
                            value={field.example}
                            onChange={(event) =>
                              handleFieldChange(field.id, "example", event.target.value)
                            }
                            className="rounded-xl border border-slate-700/60 bg-black/30 px-3 py-1 text-xs text-slate-200 focus:border-cyan-300 focus:outline-none"
                          />
                        </div>
                      </div>
                      <button
                        onClick={() => handleRemoveField(field.id)}
                        className="rounded-full border border-red-500/30 bg-red-500/10 p-2 text-red-200 transition hover:bg-red-500/30"
                        aria-label="Remove column"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-6 flex flex-wrap items-center justify-between gap-3">
                <button
                  onClick={handleGenerateDataset}
                  disabled={isGenerating}
                  className="inline-flex items-center gap-2 rounded-full border border-emerald-400/40 bg-emerald-400/20 px-5 py-2.5 text-sm font-semibold uppercase tracking-[0.25em] text-emerald-100 transition hover:bg-emerald-400/40 disabled:cursor-not-allowed disabled:border-emerald-300/20 disabled:bg-emerald-400/10 disabled:text-emerald-300/60"
                >
                  <Sparkles className="h-5 w-5" />
                  generate dataset
                </button>
                <div className="flex items-center gap-3 text-xs text-slate-400">
                  <span className="inline-flex h-2 w-2 animate-pulse rounded-full bg-emerald-300" />
                  Auto-governed synthetic mode
                </div>
              </div>
            </div>

            <div className="glass-panel rounded-3xl border border-indigo-500/30 bg-slate-900/70 p-6 shadow-neon">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-slate-100">Signal Telemetry</h2>
                <span className="rounded-full border border-indigo-400/30 bg-indigo-500/10 px-3 py-1 text-[10px] uppercase tracking-[0.3em] text-indigo-200">
                  llm diagnostics
                </span>
              </div>
              <div className="mt-4 grid gap-3 sm:grid-cols-3">
                <div className="rounded-2xl border border-indigo-400/20 bg-indigo-500/10 px-4 py-3 text-[11px] uppercase tracking-[0.3em] text-indigo-100 shadow-[0_0_24px_rgba(79,70,229,0.18)]">
                  <span className="block text-[9px] text-indigo-200/70">rows synthesized</span>
                  <span className="mt-1 block text-lg font-semibold tracking-widest text-indigo-100">
                    {stats.rows.toLocaleString()}
                  </span>
                </div>
                <div className="rounded-2xl border border-cyan-400/20 bg-cyan-500/10 px-4 py-3 text-[11px] uppercase tracking-[0.3em] text-cyan-100 shadow-[0_0_24px_rgba(8,145,178,0.2)]">
                  <span className="block text-[9px] text-cyan-200/70">fields mapped</span>
                  <span className="mt-1 block text-lg font-semibold tracking-widest text-cyan-100">
                    {stats.columns}
                  </span>
                </div>
                <div className="rounded-2xl border border-emerald-400/20 bg-emerald-500/10 px-4 py-3 text-[11px] uppercase tracking-[0.3em] text-emerald-100 shadow-[0_0_24px_rgba(16,185,129,0.2)]">
                  <span className="block text-[9px] text-emerald-200/70">fidelity</span>
                  <span className="mt-1 block text-lg font-semibold tracking-widest text-emerald-100">
                    {(stats.syntheticScore * 100).toFixed(1)}%
                  </span>
                </div>
              </div>
              <div className="mt-6 grid gap-6 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-3">
                {telemetrySignals.map((signal) => {
                  if (signal.type === "gauge") {
                    return <TelemetryGauge key={signal.id} signal={signal} />;
                  }

                  if (signal.type === "spark") {
                    return <TelemetrySpark key={signal.id} signal={signal} />;
                  }

                  if (signal.type === "bar") {
                    return <TelemetryBar key={signal.id} signal={signal} />;
                  }

                  return <TelemetryPie key={signal.id} signal={signal} />;
                })}
              </div>
            </div>
          </section>
        </main>

        <section className="glass-panel rounded-3xl border border-slate-700/70 bg-slate-900/80 p-6 shadow-neon">
          <div className="grid gap-8 xl:grid-cols-[minmax(0,1.35fr)_minmax(0,0.85fr)]">
            <div className="space-y-6">
              <div className="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
                <div>
                  <h2 className="text-lg font-semibold text-slate-100">Dataset Preview</h2>
                  <p className="text-sm text-slate-400">
                    First {previewData.length} rows streamed from SynthxAI engine. Export to CSV for downstream
                    modeling pipelines.
                  </p>
                </div>
                <div className="flex flex-wrap items-center gap-3">
                  <button
                    onClick={handleDownloadPreview}
                    className="inline-flex items-center gap-2 rounded-full border border-cyan-400/40 bg-cyan-400/10 px-4 py-2 text-xs font-semibold uppercase tracking-[0.25em] text-cyan-100 transition hover:bg-cyan-400/30"
                  >
                    <Download className="h-4 w-4" /> export csv
                  </button>
                  <button
                    onClick={() => {
                      setFields(DEFAULT_FIELDS);
                      setPreviewData(generateDatasetPreview(DEFAULT_FIELDS, rowCount));
                      setStats(computeStats(DEFAULT_FIELDS, rowCount));
                    }}
                    className="inline-flex items-center gap-2 rounded-full border border-slate-500/40 bg-slate-800 px-4 py-2 text-xs font-semibold uppercase tracking-[0.25em] text-slate-200 transition hover:bg-slate-700"
                  >
                    <RefreshCcw className="h-4 w-4" /> reset blueprint
                  </button>
                </div>
              </div>

              <div className="overflow-x-auto rounded-2xl border border-slate-700/70 bg-black/60 p-4 transition duration-500 hover:border-cyan-500/40 hover:shadow-[0_0_55px_rgba(56,189,248,0.2)]">
                <table className="min-w-full border-collapse text-sm text-slate-200">
                  <thead className="bg-slate-900/70">
                    <tr>
                      {previewData.length > 0 &&
                        Object.keys(previewData[0]).map((key) => (
                          <th
                            key={key}
                            className="border border-slate-800/80 px-3 py-2 text-left text-xs uppercase tracking-[0.3em] text-slate-400"
                          >
                            {key}
                          </th>
                        ))}
                    </tr>
                  </thead>
                  <tbody>
                    {previewData.map((row, rowIndex) => (
                      <tr key={`row-${rowIndex}`} className="odd:bg-slate-900/40">
                        {Object.keys(row).map((key) => (
                          <td
                            key={`${rowIndex}-${key}`}
                            className="border border-slate-800/80 px-3 py-2 font-mono text-xs text-slate-300"
                          >
                            {row[key] as string | number}
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-semibold uppercase tracking-[0.35em] text-slate-300">
                  Blueprint snapshots
                </h3>
                <span className="rounded-full border border-cyan-400/30 bg-cyan-500/10 px-3 py-1 text-[10px] uppercase tracking-[0.35em] text-cyan-100">
                  {fields.length} attributes
                </span>
              </div>
              <div className="grid gap-4 sm:grid-cols-2">
                {schemaBlueprint.map((field, index) => (
                  <div
                    key={`${field.label}-${index}`}
                    className="rounded-2xl border border-slate-700/60 bg-black/50 p-4 text-sm text-slate-200 shadow-inner transition-all duration-500 hover:-translate-y-1 hover:border-cyan-400/40 hover:shadow-[0_0_40px_rgba(14,165,233,0.18)]"
                  >
                    <div className="flex items-center justify-between">
                      <span className="text-xs uppercase tracking-[0.3em] text-slate-500">{`Column ${
                        index + 1
                      }`}</span>
                      <span className="rounded-full border border-cyan-500/40 bg-cyan-500/10 px-2 py-0.5 text-[10px] uppercase tracking-[0.3em] text-cyan-100">
                        {field.type}
                      </span>
                    </div>
                    <p className="mt-3 font-semibold text-slate-100">{field.label}</p>
                    <p className="mt-2 text-xs leading-6 text-slate-400">{field.description}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}

type AccentColor = "cyan" | "violet" | "emerald" | "amber" | "pink" | "blue";

type TelemetryBase = {
  id: string;
  label: string;
  caption: string;
  accent: AccentColor;
};

type TelemetryGaugeSignal = TelemetryBase & {
  type: "gauge";
  percentage: number;
  status: string;
  icon: LucideIcon;
};

type TelemetrySparkSignal = TelemetryBase & {
  type: "spark";
  points: number[];
};

type TelemetryBarSegment = {
  label: string;
  value: number;
  color: string;
};

type TelemetryBarSignal = TelemetryBase & {
  type: "bar";
  segments: TelemetryBarSegment[];
  total: number;
};

type TelemetryPieSlice = {
  label: string;
  value: number;
  color: string;
};

type TelemetryPieSignal = TelemetryBase & {
  type: "pie";
  slices: TelemetryPieSlice[];
  total: number;
};

type TelemetrySignal =
  | TelemetryGaugeSignal
  | TelemetrySparkSignal
  | TelemetryBarSignal
  | TelemetryPieSignal;

type MetricSignalProps = {
  metric: LlmMetric;
};

type TelemetryGaugeProps = {
  signal: TelemetryGaugeSignal;
};

type TelemetrySparkProps = {
  signal: TelemetrySparkSignal;
};

type TelemetryBarProps = {
  signal: TelemetryBarSignal;
};

type TelemetryPieProps = {
  signal: TelemetryPieSignal;
};

type BuildTelemetrySignalsInput = {
  stats: DatasetStats;
  blueprintDensity: number;
  llmMetrics: LlmMetric[];
};

function generateSparkPath(points: number[]): string {
  if (!points.length) return "";
  const width = 120;
  const height = 36;
  const min = Math.min(...points);
  const max = Math.max(...points);
  const range = max - min || 1;
  return points
    .map((point, index) => {
      const x = (index / (points.length - 1 || 1)) * width;
      const y = height - ((point - min) / range) * height;
      return `${index === 0 ? "M" : "L"}${x.toFixed(1)} ${y.toFixed(1)}`;
    })
    .join(" ");
}

function MetricSignal({ metric }: MetricSignalProps) {
  const palette = {
    cyan: {
      border: "border-cyan-400/40",
      glow: "from-cyan-500/20 via-transparent to-transparent",
      text: "text-cyan-100",
    },
    violet: {
      border: "border-violet-400/40",
      glow: "from-violet-500/18 via-transparent to-transparent",
      text: "text-violet-100",
    },
    emerald: {
      border: "border-emerald-400/40",
      glow: "from-emerald-500/20 via-transparent to-transparent",
      text: "text-emerald-100",
    },
    amber: {
      border: "border-amber-400/40",
      glow: "from-amber-500/20 via-transparent to-transparent",
      text: "text-amber-100",
    },
    pink: {
      border: "border-pink-400/40",
      glow: "from-pink-500/20 via-transparent to-transparent",
      text: "text-pink-100",
    },
  } as const;

  const iconMap = {
    cyan: Activity,
    violet: Radar,
    emerald: Gauge,
    amber: Cpu,
    pink: Waves,
  } as const;

  const trendLabel = metric.trend === "up" ? "ascend" : "stabilize";
  const trendSymbol = metric.trend === "up" ? "▲" : "▼";
  const trendColor = metric.trend === "up" ? "text-emerald-300" : "text-amber-300";
  const Icon = iconMap[metric.accent];
  const { border, glow, text } = palette[metric.accent];

  return (
    <div
      className={clsx(
        "relative overflow-hidden rounded-2xl border bg-black/50 p-4 shadow-[0_0_35px_rgba(34,211,238,0.18)] transition duration-500 hover:-translate-y-1 hover:shadow-[0_0_55px_rgba(56,189,248,0.24)]",
        border
      )}
    >
      <div
        className={clsx(
          "pointer-events-none absolute inset-x-0 -top-16 h-24 bg-linear-to-b blur-3xl",
          glow
        )}
      />
      <div className="relative flex items-center gap-3">
        <span
          className={clsx(
            "grid h-9 w-9 place-items-center rounded-xl border bg-black/40 text-base shadow-[0_0_25px_rgba(103,232,249,0.25)]",
            text,
            border
          )}
        >
          <Icon className="h-4 w-4" />
        </span>
        <div>
          <p className="text-xs uppercase tracking-[0.28em] text-slate-400">{metric.label}</p>
          <p className={clsx("mt-1 text-xl font-semibold", text)}>{metric.value}</p>
        </div>
      </div>
      <div className="mt-3 flex items-center justify-between text-xs text-slate-400">
        <span>LLM fusion cycle</span>
        <span className={clsx("inline-flex items-center gap-1 font-semibold", trendColor)}>
          {trendSymbol} {trendLabel}
        </span>
      </div>
    </div>
  );
}
function buildTelemetrySignals({ stats, blueprintDensity, llmMetrics }: BuildTelemetrySignalsInput): TelemetrySignal[] {
  const clamp01 = (value: number) => Math.min(Math.max(value, 0), 1);
  const getMetric = (label: string) => llmMetrics.find((metric) => metric.label === label);

  const parseTokens = (raw: string | undefined, fallback: number) => {
    if (!raw) return fallback;
    const numeric = parseFloat(raw.replace(/[^0-9.]/g, ""));
    if (Number.isNaN(numeric)) return fallback;
    const multiplier = raw.toLowerCase().includes("k") ? 1000 : 1;
    return numeric * multiplier;
  };

  const parseNumber = (raw: string | undefined, fallback: number) => {
    if (!raw) return fallback;
    const numeric = parseFloat(raw.replace(/[^0-9.]/g, ""));
    return Number.isNaN(numeric) ? fallback : numeric;
  };

  const tokens = parseTokens(getMetric("Tokens / sec")?.value, 32000);
  const latency = parseNumber(getMetric("Latency")?.value, 140);
  const contextLoad = parseNumber(getMetric("Context load")?.value, 68);
  const coherence = parseNumber(getMetric("Coherence")?.value, 92);

  const synthetic = clamp01(stats.syntheticScore);
  const throughputScore = clamp01(tokens / 52000);
  const latencyScore = clamp01(1 - latency / 320);
  const memoryScore = clamp01((stats.rows * stats.columns) / 800000);
  const blueprint = clamp01(blueprintDensity / 100);

  const basePoints = Array.from({ length: 24 }, (_, index) => index + 1);
  const synthBias = synthetic * 0.6 + 0.3;
  const makeSeries = (bias: number, variance: number, amplitude: number, turbulence = 0.24) =>
    basePoints.map((value) =>
      bias +
      Math.sin(value * variance) * amplitude +
      (Math.random() - 0.5) * amplitude * turbulence +
      Math.sin(value * 0.08) * 0.08
    );

  return [
    {
      id: "token-throughput",
      type: "spark",
      label: "Token throughput",
      caption: "Emission velocity across sampling threads",
      accent: "cyan",
      points: makeSeries(clamp01(tokens / 45000), 0.32, 0.28),
    },
    {
      id: "latency-envelope",
      type: "gauge",
      label: "Latency envelope",
      caption: "Mean response turn-around",
      accent: "violet",
      percentage: Math.max(0.08, latencyScore),
      status: latency < 110 ? "Prime" : latency < 170 ? "Steady" : "Slow",
      icon: Radar,
    },
    {
      id: "blueprint-coverage",
      type: "pie",
      label: "Blueprint coverage",
      caption: "Attributes with full signal capture",
      accent: "emerald",
      slices: [
        {
          label: "Signal mapped",
          value: Math.round(blueprint * 100),
          color: "rgba(16,185,129,0.85)",
        },
        {
          label: "Pending refinement",
          value: Math.max(0, 100 - Math.round(blueprint * 100)),
          color: "rgba(15,118,110,0.45)",
        },
      ],
      total: 100,
    },
    {
      id: "context-allocation",
      type: "bar",
      label: "Context allocation",
      caption: "KV cache utilization across stages",
      accent: "amber",
      segments: [
        {
          label: "Prompt",
          value: contextLoad * 0.34,
          color: "rgba(251,191,36,0.82)",
        },
        {
          label: "Generation",
          value: contextLoad * 0.42,
          color: "rgba(253,224,71,0.72)",
        },
        {
          label: "Memory",
          value: contextLoad * 0.24,
          color: "rgba(245,158,11,0.62)",
        },
      ],
      total: Math.max(contextLoad, 1),
    },
    {
      id: "coherence-field",
      type: "spark",
      label: "Coherence stability",
      caption: "Variance across multi-sample ensembles",
      accent: "pink",
      points: makeSeries(clamp01(coherence / 110), 0.26, 0.24, 0.2).map(
        (point) => point + synthBias * 0.18
      ),
    },
    {
      id: "emission-speed",
      type: "gauge",
      label: "Emission speed",
      caption: "Rows synthesized per second",
      accent: "blue",
      percentage: Math.max(0.1, throughputScore * 0.85 + memoryScore * 0.25),
      status: tokens > 40000 ? "Surging" : tokens > 30000 ? "Flow" : "Idle",
      icon: Rocket,
    },
  ];
}

function TelemetryGauge({ signal }: TelemetryGaugeProps) {
  const palette = {
    cyan: {
      border: "border-cyan-400/40",
      glow: "from-cyan-500/20 via-transparent to-transparent",
      text: "text-cyan-100",
      track: "rgba(12, 74, 110, 0.55)",
      fill: "rgba(34, 211, 238, 0.9)",
    },
    violet: {
      border: "border-violet-400/40",
      glow: "from-violet-500/20 via-transparent to-transparent",
      text: "text-violet-100",
      track: "rgba(76, 29, 149, 0.55)",
      fill: "rgba(167, 139, 250, 0.9)",
    },
    emerald: {
      border: "border-emerald-400/40",
      glow: "from-emerald-500/20 via-transparent to-transparent",
      text: "text-emerald-100",
      track: "rgba(6, 78, 59, 0.55)",
      fill: "rgba(52, 211, 153, 0.9)",
    },
    amber: {
      border: "border-amber-400/40",
      glow: "from-amber-500/20 via-transparent to-transparent",
      text: "text-amber-100",
      track: "rgba(120, 53, 15, 0.55)",
      fill: "rgba(251, 191, 36, 0.92)",
    },
    pink: {
      border: "border-pink-400/35",
      glow: "from-pink-500/20 via-transparent to-transparent",
      text: "text-pink-100",
      track: "rgba(131, 24, 67, 0.55)",
      fill: "rgba(244, 114, 182, 0.85)",
    },
    blue: {
      border: "border-sky-400/35",
      glow: "from-sky-500/22 via-transparent to-transparent",
      text: "text-sky-100",
      track: "rgba(8, 47, 73, 0.55)",
      fill: "rgba(56, 189, 248, 0.88)",
    },
  } as const;

  const angle = Math.max(4, Math.min(signal.percentage, 1) * 360);
  const { border, glow, text, track, fill } = palette[signal.accent];
  const Icon = signal.icon;

  return (
    <div
      className={clsx(
        "relative overflow-hidden rounded-2xl border bg-black/45 p-5 text-sm text-slate-300 shadow-[0_0_35px_rgba(56,189,248,0.16)] backdrop-blur transition hover:-translate-y-1 hover:shadow-[0_0_55px_rgba(59,130,246,0.25)]",
        border
      )}
    >
      <div
        className={clsx(
          "pointer-events-none absolute inset-x-0 -top-24 h-36 bg-linear-to-b blur-3xl",
          glow
        )}
      />
      <div className="relative mx-auto h-36 w-36">
        <div className="absolute inset-0 rounded-full border border-slate-800/60 bg-slate-900/60 shadow-inner" />
        <div
          className="absolute inset-0 rounded-full"
          style={{
            background: `conic-gradient(${fill} ${angle}deg, ${track} ${angle}deg)`,
          }}
        />
        <div className="absolute inset-[18%] grid place-items-center rounded-full border border-slate-800/70 bg-slate-950/95 shadow-[0_0_25px_rgba(14,116,144,0.28)]">
          <Icon className={clsx("h-6 w-6", text)} />
          <span className={clsx("mt-2 text-xs uppercase tracking-[0.35em]", text)}>
            {signal.status}
          </span>
        </div>
      </div>
      <div className="mt-6 text-center">
        <p className="text-xs uppercase tracking-[0.45em] text-slate-400">{signal.label}</p>
        <p className="mt-3 text-[13px] text-slate-300">{signal.caption}</p>
      </div>
    </div>
  );
}

function TelemetrySpark({ signal }: TelemetrySparkProps) {
  const palette = {
    cyan: {
      border: "border-cyan-400/30",
      text: "text-cyan-100",
      gradient: ["rgba(56,189,248,0.45)", "rgba(8,145,178,0.15)"] as const,
    },
    violet: {
      border: "border-violet-400/30",
      text: "text-violet-100",
      gradient: ["rgba(167,139,250,0.45)", "rgba(109,40,217,0.12)"] as const,
    },
    emerald: {
      border: "border-emerald-400/30",
      text: "text-emerald-100",
      gradient: ["rgba(52,211,153,0.45)", "rgba(6,78,59,0.12)"] as const,
    },
    amber: {
      border: "border-amber-400/30",
      text: "text-amber-100",
      gradient: ["rgba(251,191,36,0.45)", "rgba(120,53,15,0.12)"] as const,
    },
    pink: {
      border: "border-pink-400/35",
      text: "text-pink-100",
      gradient: ["rgba(244,114,182,0.48)", "rgba(190,24,93,0.1)"] as const,
    },
    blue: {
      border: "border-sky-400/35",
      text: "text-sky-100",
      gradient: ["rgba(96,165,250,0.45)", "rgba(30,64,175,0.12)"] as const,
    },
  } as const;

  const gradientId = `spark-gradient-${signal.id}`;
  const path = generateSparkPath(signal.points);
  const { border, text, gradient } = palette[signal.accent];

  return (
    <div
      className={clsx(
        "relative overflow-hidden rounded-2xl border bg-slate-950/80 p-4 shadow-[0_0_34px_rgba(59,130,246,0.18)] backdrop-blur transition hover:-translate-y-1 hover:shadow-[0_0_54px_rgba(14,165,233,0.28)]",
        border
      )}
    >
      <div className="flex items-center justify-between text-[10px] uppercase tracking-[0.35em] text-slate-400">
        <span>{signal.label}</span>
        <span className={clsx("font-semibold", text)}>live</span>
      </div>
      <div className="mt-3 h-28 w-full">
        <svg viewBox="0 0 120 36" className="h-full w-full">
          <defs>
            <linearGradient id={gradientId} x1="0%" y1="0%" x2="0%" y2="100%">
              <stop offset="0%" stopColor={gradient[0]} />
              <stop offset="100%" stopColor={gradient[1]} />
            </linearGradient>
          </defs>
          <path d={`${path} L120 36 L0 36 Z`} fill={`url(#${gradientId})`} opacity={0.65} />
          <path d={path} fill="none" stroke={gradient[0]} strokeWidth={1.8} strokeLinecap="round" />
        </svg>
      </div>
      <p className="mt-3 text-[11px] text-slate-400">{signal.caption}</p>
    </div>
  );
}

function TelemetryBar({ signal }: TelemetryBarProps) {
  const palette = {
    cyan: {
      border: "border-cyan-400/30",
      text: "text-cyan-100",
    },
    violet: {
      border: "border-violet-400/30",
      text: "text-violet-100",
    },
    emerald: {
      border: "border-emerald-400/30",
      text: "text-emerald-100",
    },
    amber: {
      border: "border-amber-400/30",
      text: "text-amber-100",
    },
    pink: {
      border: "border-pink-400/35",
      text: "text-pink-100",
    },
    blue: {
      border: "border-sky-400/35",
      text: "text-sky-100",
    },
  } as const;

  const { border, text } = palette[signal.accent];
  const total = Math.max(signal.total, 1);

  return (
    <div
      className={clsx(
        "relative overflow-hidden rounded-2xl border bg-slate-950/80 p-4 shadow-[0_0_30px_rgba(99,102,241,0.18)] backdrop-blur transition hover:-translate-y-1 hover:shadow-[0_0_48px_rgba(129,140,248,0.25)]",
        border
      )}
    >
      <div className="flex items-center justify-between text-[10px] uppercase tracking-[0.35em] text-slate-400">
        <span>{signal.label}</span>
        <span className={clsx("font-semibold", text)}>cache</span>
      </div>
      <div className="mt-4 h-24">
        <div className="flex h-4 w-full overflow-hidden rounded-full border border-slate-700/60 bg-slate-950">
          {signal.segments.map((segment) => {
            const width = Math.max((segment.value / total) * 100, 0);
            return (
              <span
                key={segment.label}
                style={{
                  width: `${width}%`,
                  backgroundColor: segment.color,
                }}
                className="h-full transition-[width] duration-500"
              />
            );
          })}
        </div>
        <div className="mt-4 grid gap-2 text-[11px] text-slate-400">
          {signal.segments.map((segment) => (
            <div key={segment.label} className="flex items-center justify-between">
              <span className="inline-flex items-center gap-2">
                <span
                  className="h-2.5 w-2.5 rounded-full"
                  style={{ backgroundColor: segment.color }}
                />
                {segment.label}
              </span>
              <span className={clsx("font-semibold", text)}>
                {Math.round((segment.value / total) * 100)}%
              </span>
            </div>
          ))}
        </div>
      </div>
      <p className="mt-3 text-[11px] text-slate-400">{signal.caption}</p>
    </div>
  );
}

function TelemetryPie({ signal }: TelemetryPieProps) {
  const palette = {
    cyan: {
      border: "border-cyan-400/30",
      text: "text-cyan-100",
    },
    violet: {
      border: "border-violet-400/30",
      text: "text-violet-100",
    },
    emerald: {
      border: "border-emerald-400/30",
      text: "text-emerald-100",
    },
    amber: {
      border: "border-amber-400/30",
      text: "text-amber-100",
    },
    pink: {
      border: "border-pink-400/35",
      text: "text-pink-100",
    },
    blue: {
      border: "border-sky-400/35",
      text: "text-sky-100",
    },
  } as const;

  const { border, text } = palette[signal.accent];
  const total = Math.max(signal.total, 1);

  const { segments: gradientSegments } = signal.slices.reduce(
    (accumulator, slice) => {
      const start = (accumulator.cursor / total) * 360;
      const nextCursor = accumulator.cursor + slice.value;
      const end = (nextCursor / total) * 360;
      return {
        cursor: nextCursor,
        segments: [...accumulator.segments, `${slice.color} ${start}deg ${end}deg`],
      };
    },
    { cursor: 0, segments: [] as string[] }
  );
  const stops = gradientSegments.join(", ");

  const primary = signal.slices[0];
  const primaryPercent = primary ? Math.round((primary.value / total) * 100) : 0;

  return (
    <div
      className={clsx(
        "relative overflow-hidden rounded-2xl border bg-slate-950/80 p-4 shadow-[0_0_34px_rgba(52,211,153,0.18)] backdrop-blur transition hover:-translate-y-1 hover:shadow-[0_0_52px_rgba(52,211,153,0.28)]",
        border
      )}
    >
      <div className="flex items-center justify-between text-[10px] uppercase tracking-[0.35em] text-slate-400">
        <span>{signal.label}</span>
        <span className={clsx("font-semibold", text)}>coverage</span>
      </div>
      <div className="mt-4 flex items-center gap-5">
        <div className="relative h-28 w-28">
          <div
            className="h-full w-full rounded-full border border-slate-800/50"
            style={{ background: `conic-gradient(${stops})` }}
          />
          <div className="absolute inset-[22%] grid place-items-center rounded-full border border-slate-800/60 bg-slate-950/90 text-center">
            <span className={clsx("text-xl font-semibold", text)}>{primaryPercent}%</span>
            <span className="text-[9px] uppercase tracking-[0.3em] text-slate-500">mapped</span>
          </div>
        </div>
        <div className="flex-1 space-y-2 text-[11px] text-slate-400">
          {signal.slices.map((slice) => (
            <div key={slice.label} className="flex items-center justify-between">
              <span className="inline-flex items-center gap-2">
                <span className="h-2.5 w-2.5 rounded-full" style={{ backgroundColor: slice.color }} />
                {slice.label}
              </span>
              <span className={clsx("font-semibold", text)}>
                {Math.round((slice.value / total) * 100)}%
              </span>
            </div>
          ))}
        </div>
      </div>
      <p className="mt-3 text-[11px] text-slate-400">{signal.caption}</p>
    </div>
  );
}
